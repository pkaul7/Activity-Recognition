# -*- coding: utf-8 -*-
"""SupervisedLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oy1sCwejN6OqXu3N_WPWYx-9UdXT6OHR
"""

#from google.colab import files
#uploaded = files.upload()

"""Importing libraries"""

import os
import numpy as np
import pandas as pd
from sklearn import model_selection
from sklearn.linear_model import LogisticRegression
from sklearn import svm
from sklearn import metrics
from sklearn import tree
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from lightgbm import LGBMClassifier

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import itertools

"""# Read data and split into train-val"""
path = 'output_plots'
if not os.path.exists(path):
    os.makedirs(path)

def getScores(is_main = False):

	train_df = pd.read_csv('train.csv')
	test_df = pd.read_csv('test.csv')
	complete_df = pd.concat([train_df, test_df], axis=0)
	X_train, X_val, y_train, y_val = model_selection.train_test_split(train_df.iloc[:, 0:-2], train_df.iloc[:, -1:], test_size=0.1, random_state = 0)
	X_test, y_test = test_df.iloc[:, 0:-2], test_df.iloc[:, -1:]
	scores_test = []
	scores_train = []

	"""## Logistic Regression on training data"""
	import matplotlib.pyplot as plt
	# default parameters
	logisticRegr = LogisticRegression(max_iter=1000000)
	logisticRegr.fit(X_train, y_train.values.ravel())
	logistic_score_train = logisticRegr.score(X_train, y_train)
	logistic_score_test = logisticRegr.score(X_test, y_test)
	scores_test.append(logistic_score_test)
	scores_train.append(logistic_score_train)
	if(is_main):
		print("Accuracy score for Logistic Regression: " + str(logistic_score_test))

	"""## Linear SVM"""

	svc = svm.LinearSVC(random_state=0, max_iter=1000000)
	svc.fit(X_train, y_train.values.ravel())
	linear_svm_score_train = metrics.accuracy_score(y_train.values.ravel(), svc.predict(X_train))
	linear_svm_score_test = metrics.accuracy_score(y_test.values.ravel(), svc.predict(X_test))
	scores_test.append(linear_svm_score_test)
	scores_train.append(linear_svm_score_train)
	if(is_main):
		print("Accuracy score for Linear SVM: "+ str(linear_svm_score_test))

	"""## Plain Decision Tree"""

	DecisionTree = tree.DecisionTreeClassifier(random_state=0)
	decision_tree = DecisionTree.fit(X_train, y_train.values.ravel())
	decision_tree_score_train = metrics.accuracy_score(y_train.values.ravel(), decision_tree.predict(X_train))
	decision_tree_score_test = metrics.accuracy_score(y_test.values.ravel(), decision_tree.predict(X_test))
	scores_test.append(decision_tree_score_test)
	scores_train.append(decision_tree_score_train)
	if(is_main):
		print("Accuracy score for Decision Tree: " +str(decision_tree_score_test))
		nodes=tree.plot_tree(decision_tree.fit(X_train, y_train.values.ravel()))
		plt.savefig("output_plots/Plain_decision_tree.png" , format = 'png')
		plt.clf()

	"""## Decision tree with limited depth"""

	DecisionTree = tree.DecisionTreeClassifier(random_state=0, max_depth=8)
	decision_tree = DecisionTree.fit(X_train, y_train.values.ravel())
	decision_tree_score_depth = metrics.accuracy_score(y_test.values.ravel(), decision_tree.predict(X_test))
	if(is_main):
		print("Accuracy score for Decision tree with max depth: "+str(decision_tree_score_depth))
		nodes=tree.plot_tree(decision_tree.fit(X_train, y_train.values.ravel()))
		plt.savefig("output_plots/decision_tree_limited_depth.png" , format = 'png')
		plt.clf()
	"""## Gaussian Naive Bayes"""

	naive_bayes = GaussianNB().fit(X_train, y_train.values.ravel())
	naive_bayes_score_train  = metrics.accuracy_score(y_train.values.ravel(), naive_bayes.predict(X_train))
	naive_bayes_score_test = metrics.accuracy_score(y_test.values.ravel(), naive_bayes.predict(X_test))
	scores_test.append(naive_bayes_score_test)
	scores_train.append(naive_bayes_score_train)
	if(is_main):
		print("Accuracy score for Gaussian Naive Bayes: " +str(naive_bayes_score_test))

	"""## Random Forest"""

	random_forest_classifier = RandomForestClassifier(random_state=1)
	random_forest = random_forest_classifier.fit(X_train, y_train.values.ravel())
	random_forest_score_train = metrics.accuracy_score(y_train.values.ravel(), random_forest.predict(X_train))
	random_forest_score_test = metrics.accuracy_score(y_test.values.ravel(), random_forest.predict(X_test))
	scores_test.append(random_forest_score_test)
	scores_train.append(random_forest_score_train)
	if(is_main):
		print("Accuracy score for Random Forest: "+str(random_forest_score_test))

	"""## Random Forest With Limited Depth"""

	random_forest_classifier = RandomForestClassifier(max_depth=15, random_state=1)
	random_forest = random_forest_classifier.fit(X_train, y_train.values.ravel())
	random_forest_score_depth = metrics.accuracy_score(y_test.values.ravel(), random_forest.predict(X_test))
	if(is_main):
		print("Accuracy score for Random Forest with max depth: "+ str(random_forest_score_depth))

	return(scores_test,scores_train,svc)

def main():
	getScores(is_main = True)


if __name__ == "__main__":
  main()
